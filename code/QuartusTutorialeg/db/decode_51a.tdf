--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone V" LPM_DECODES=7 LPM_WIDTH=3 data eq
--VERSION_BEGIN 18.1 cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_lpm_add_sub 2018:09:12:13:04:24:SJ cbx_lpm_compare 2018:09:12:13:04:24:SJ cbx_lpm_decode 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_nadder 2018:09:12:13:04:24:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ  VERSION_END


-- Copyright (C) 2018  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details.



--synthesis_resources = lut 8 
SUBDESIGN decode_51a
( 
	data[2..0]	:	input;
	eq[6..0]	:	output;
) 
VARIABLE 
	data_wire[2..0]	: WIRE;
	eq_node[6..0]	: WIRE;
	eq_wire[7..0]	: WIRE;
	w_anode356w[3..0]	: WIRE;
	w_anode374w[3..0]	: WIRE;
	w_anode385w[3..0]	: WIRE;
	w_anode396w[3..0]	: WIRE;
	w_anode407w[3..0]	: WIRE;
	w_anode418w[3..0]	: WIRE;
	w_anode429w[3..0]	: WIRE;
	w_anode440w[3..0]	: WIRE;

BEGIN 
	data_wire[] = data[];
	eq[] = eq_node[];
	eq_node[6..0] = eq_wire[6..0];
	eq_wire[] = ( w_anode440w[3..3], w_anode429w[3..3], w_anode418w[3..3], w_anode407w[3..3], w_anode396w[3..3], w_anode385w[3..3], w_anode374w[3..3], w_anode356w[3..3]);
	w_anode356w[] = ( (w_anode356w[2..2] & (! data_wire[2..2])), (w_anode356w[1..1] & (! data_wire[1..1])), (w_anode356w[0..0] & (! data_wire[0..0])), B"1");
	w_anode374w[] = ( (w_anode374w[2..2] & (! data_wire[2..2])), (w_anode374w[1..1] & (! data_wire[1..1])), (w_anode374w[0..0] & data_wire[0..0]), B"1");
	w_anode385w[] = ( (w_anode385w[2..2] & (! data_wire[2..2])), (w_anode385w[1..1] & data_wire[1..1]), (w_anode385w[0..0] & (! data_wire[0..0])), B"1");
	w_anode396w[] = ( (w_anode396w[2..2] & (! data_wire[2..2])), (w_anode396w[1..1] & data_wire[1..1]), (w_anode396w[0..0] & data_wire[0..0]), B"1");
	w_anode407w[] = ( (w_anode407w[2..2] & data_wire[2..2]), (w_anode407w[1..1] & (! data_wire[1..1])), (w_anode407w[0..0] & (! data_wire[0..0])), B"1");
	w_anode418w[] = ( (w_anode418w[2..2] & data_wire[2..2]), (w_anode418w[1..1] & (! data_wire[1..1])), (w_anode418w[0..0] & data_wire[0..0]), B"1");
	w_anode429w[] = ( (w_anode429w[2..2] & data_wire[2..2]), (w_anode429w[1..1] & data_wire[1..1]), (w_anode429w[0..0] & (! data_wire[0..0])), B"1");
	w_anode440w[] = ( (w_anode440w[2..2] & data_wire[2..2]), (w_anode440w[1..1] & data_wire[1..1]), (w_anode440w[0..0] & data_wire[0..0]), B"1");
END;
--VALID FILE
